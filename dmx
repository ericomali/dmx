#!/usr/bin/env ruby
#
# LICENSE
# Copyright 2017 Eric Melville
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# DESCRIPTION
# dmx - dumb mutex manager
#
# This is a simple tool to serialize UNIX commands. All it does is take the
# first argument as a file name to lock with, then sends the rest of the
# arguments to a sub shell. For any set of processes with the same lock file,
# only one will run at a time. Typically this is done with a homogeneous set
# of long running commands, such as software builds or file copies, but other
# creative uses are possible.
#
# HISTORY
# 0.1 - Initial version, no more than usage text and lock-run-unlock
#
# TODO
# Some kind of error checking
# Decide on sensible various return values
# Use TMPDIR for lock files without slashes

if ARGV.size < 2 then
    print "usage: dmx lockfile command (arguments)\n"
    exit(1)
end

l = ARGV[0]
a = ARGV
a.delete_at(0)
s = a.join(" ")

f = File.open(l, File::RDWR|File::CREAT)
f.flock(File::LOCK_EX)
system(s)
f.flock(File::LOCK_UN)
f.close()
